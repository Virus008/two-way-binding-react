{"version":3,"sources":["components/Header.js","components/Person.js","components/Bind.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Component","Person","props","type","name","onChange","changename","id","Bind","state","person","changenamedata","event","setState","target","value","this","age","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAgBeA,E,uKAZP,OACA,6BACI,yBAAKC,UAAU,+CACX,yBAAKA,UAAU,aACX,yBAAKC,GAAG,IAAID,UAAU,gBAAtB,cAEF,kC,GARGE,aCsBNC,G,MArBA,SAACC,GACZ,OACI,6BACI,yBAAKJ,UAAU,aACX,sCACA,sEACE,6BACN,yBAAKA,UAAU,OACX,yBAAKA,UAAU,qBACX,gEACA,8BAAUA,UAAU,eAAeK,KAAK,OAAOC,KAAK,aAAaC,SAAUH,EAAMI,cAErF,yBAAKR,UAAU,oBAAoBS,GAAG,kBAClC,0CACA,yBAAKT,UAAU,YAAYS,GAAG,aAA9B,IAA4CL,EAAME,KAAlD,UCeLI,E,4MA5BXC,MAAQ,CACJC,OAAQ,CACJ,CAACN,KAAM,O,EAIfO,eAAiB,SAACC,GACd,EAAKC,SAAS,CACVH,OAAQ,CACJ,CAACN,KAAMQ,EAAME,OAAOC,W,uDAM5B,OACI,6BACI,kBAAC,EAAD,CACAX,KAAMY,KAAKP,MAAMC,OAAO,GAAGN,KAC3Ba,IAAKD,KAAKP,MAAMC,OAAO,GAAGO,IAC1BX,WAAYU,KAAKL,sB,GArBdX,aCcJkB,MAbf,WACE,OACE,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,SCCYqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.098fc5a1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() { \r\n        return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <div className=\"container\">\r\n                    <div to=\"/\" className=\"navbar-brand\">Virus008</div>\r\n                </div>\r\n            </nav><br></br>\r\n\t\t</div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './css/Person.css';\r\n\r\nconst Person = (props) => {\r\n    return(\r\n        <div>\r\n            <div className=\"jumbotron\">\r\n                <h3>Hello,</h3>\r\n                <p>This is an example of Two Way Binding.</p>\r\n            </div><br></br>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 col-lg-6\">\r\n                    <h6>Type text in the below textarea.</h6>\r\n                    <textarea className=\"form-control\" type=\"text\" name=\"peron-name\" onChange={props.changename} />\r\n                </div>\r\n                <div className=\"col-md-6 col-lg-6\" id=\"display-result\">\r\n                    <h6>You typed.</h6>\r\n                    <div className=\"px-3 py-2\" id=\"resultbox\"> {props.name} </div>\r\n                </div>\r\n            </div>\r\n        </div>            \r\n    )\r\n};\r\n\r\nexport default Person;","import React, { Component } from 'react';\r\nimport Person from './Person';\r\n\r\nclass Bind extends Component {\r\n    state = {\r\n        person: [\r\n            {name: \" \"}\r\n        ]\r\n    };\r\n    \r\n    changenamedata = (event) => {\r\n        this.setState({\r\n            person: [\r\n                {name: event.target.value}\r\n            ]\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Person \r\n                name={this.state.person[0].name} \r\n                age={this.state.person[0].age} \r\n                changename={this.changenamedata}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Bind;","import React from 'react';\nimport Header from './components/Header';\nimport Bind from './components/Bind';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header />\n      </header>\n      <div className=\"container\">\n        <Bind />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}